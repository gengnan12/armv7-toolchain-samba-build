name: Build ARMv7 Toolchain (Ubuntu 18.04 + Bypass host-m4)
on:
  workflow_dispatch:

jobs:
  build-toolchain:
    runs-on: ubuntu-18.04  # 更换为 Ubuntu 18.04 LTS
    timeout-minutes: 180
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (适配 Ubuntu 18.04)
        run: |
          echo "===== 安装依赖 ====="
          # Ubuntu 18.04 默认包含 Python 2.7，无需额外添加源
          sudo apt update -y
          # 安装系统 m4 + 编译依赖（18.04 源中包名与 20.04 一致）
          sudo apt install -y m4 python2.7 python2.7-dev \
                              build-essential git wget cpio unzip rsync bc \
                              flex bison libssl-dev

      - name: Download and extract Buildroot
        run: |
          echo "===== 下载并解压 Buildroot ====="
          OFFICIAL_URL="https://buildroot.org/downloads/buildroot-2017.11.1.tar.gz"
          for i in {1..3}; do
            if wget --timeout=600 --tries=3 $OFFICIAL_URL; then
              echo "下载成功"
              break
            else
              echo "第 $i 次失败，重试..."
              sleep 10
            fi
          done
          [ -f "buildroot-2017.11.1.tar.gz" ] || { echo "Buildroot 下载失败"; exit 1; }
          tar -xzf buildroot-2017.11.1.tar.gz
          cd buildroot-2017.11.1
          make distclean > /dev/null 2>&1 || true

      - name: Bypass host-m4 compilation (关键修复)
        run: |
          echo "===== 绕过 host-m4 编译 ====="
          cd buildroot-2017.11.1
          # 1. 创建 m4 编译完成标记，欺骗 Buildroot 跳过编译
          mkdir -p output/build/host-m4-1.4.18/
          touch output/build/host-m4-1.4.18/.stamp_installed
          touch output/build/host-m4-1.4.18/.stamp_built
          touch output/build/host-m4-1.4.18/.stamp_extracted
          
          # 2. 移除 Makefile 中对 host-m4 的依赖检查
          sed -i 's/host-m4 //' package/Makefile.in

      - name: Configure Buildroot
        run: |
          cd buildroot-2017.11.1
          echo "===== 配置 Buildroot ====="
          cat > .config << EOF
          BR2_HAVE_DOT_CONFIG=y
          BR2_arm=y
          BR2_cortex_a7=y
          BR2_ARM_EABIHF=y
          BR2_TOOLCHAIN_BUILDROOT=y
          BR2_GCC_VERSION_5_X=y
          BR2_UCLIBC=y
          BR2_TOOLCHAIN_PTHREADS=y
          BR2_TOOLCHAIN_NO_SSP=y
          BR2_TOOLCHAIN_EXTERNAL=n
          BR2_EXTERNAL=
          EOF
          make oldconfig BR2_EXTERNAL=

      - name: Add swap space (18.04 同样需要避免内存不足)
        run: |
          sudo fallocate -l 10G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile

      - name: Build toolchain
        run: |
          cd buildroot-2017.11.1
          export FORCE_UNSAFE_CONFIGURE=1
          make toolchain -j2 V=1 BR2_EXTERNAL=

      - name: Upload toolchain
        uses: actions/upload-artifact@v4
        with:
          name: armv7-toolchain
          path: buildroot-2017.11.1/output/host/
          retention-days: 30
