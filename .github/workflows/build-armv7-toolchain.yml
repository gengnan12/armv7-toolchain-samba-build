name: Build Samba with System ARM Toolchain (Fix Download Errors)
on:
  workflow_dispatch:

jobs:
  build-samba:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure basic sources
        run: |
          echo "===== 配置基础源 ====="
          sudo rm -f /etc/apt/sources.list.d/*.list
          
          sudo tee /etc/apt/sources.list.d/amd64.list > /dev/null << 'EOF'
          deb http://archive.ubuntu.com/ubuntu/ noble main restricted universe multiverse
          EOF

          sudo tee /etc/apt/sources.list.d/armhf.list > /dev/null << 'EOF'
          deb [arch=armhf] http://mirrors.aliyun.com/ubuntu-ports/ focal main restricted universe multiverse
          EOF

          sudo dpkg --add-architecture armhf
          sudo apt update -y || true

      - name: Manually install critical ARM dependencies (with download retry)
        run: |
          echo "===== 手动安装关键ARM依赖 ====="
          mkdir -p arm-debs && cd arm-debs

          # 修复：添加下载重试机制和备用源
          retry_wget() {
            local url=$1
            local output=$2
            # 最多重试3次，每次间隔2秒
            for i in {1..3}; do
              if wget -q --show-progress -O "$output" "$url"; then
                return 0
              fi
              echo "下载失败，重试第 $i 次..."
              sleep 2
            done
            echo "错误：无法下载 $url"
            return 1
          }

          # 主源：阿里云镜像
          # 备用源：华为云镜像（当阿里云不可用时自动切换）
          base_urls=(
            "http://mirrors.aliyun.com/ubuntu-ports"
            "https://mirrors.huaweicloud.com/ubuntu-ports"
          )

          # 下载libc6:armhf
          retry_wget "${base_urls[0]}/pool/main/g/glibc/libc6_2.31-0ubuntu9.9_armhf.deb" "libc6_2.31-0ubuntu9.9_armhf.deb" || \
          retry_wget "${base_urls[1]}/pool/main/g/glibc/libc6_2.31-0ubuntu9.9_armhf.deb" "libc6_2.31-0ubuntu9.9_armhf.deb"

          # 下载libidn2-0:armhf
          retry_wget "${base_urls[0]}/pool/main/libi/libidn2/libidn2-0_2.2.0-2ubuntu2_armhf.deb" "libidn2-0_2.2.0-2ubuntu2_armhf.deb" || \
          retry_wget "${base_urls[1]}/pool/main/libi/libidn2/libidn2-0_2.2.0-2ubuntu2_armhf.deb" "libidn2-0_2.2.0-2ubuntu2_armhf.deb"

          # 下载zlib1g:armhf
          retry_wget "${base_urls[0]}/pool/main/z/zlib/zlib1g_1.2.11.dfsg-2ubuntu1.5_armhf.deb" "zlib1g_1.2.11.dfsg-2ubuntu1.5_armhf.deb" || \
          retry_wget "${base_urls[1]}/pool/main/z/zlib/zlib1g_1.2.11.dfsg-2ubuntu1.5_armhf.deb" "zlib1g_1.2.11.dfsg-2ubuntu1.5_armhf.deb"

          # 下载libc6-dev:armhf
          retry_wget "${base_urls[0]}/pool/main/g/glibc/libc6-dev_2.31-0ubuntu9.9_armhf.deb" "libc6-dev_2.31-0ubuntu9.9_armhf.deb" || \
          retry_wget "${base_urls[1]}/pool/main/g/glibc/libc6-dev_2.31-0ubuntu9.9_armhf.deb" "libc6-dev_2.31-0ubuntu9.9_armhf.deb"

          # 检查所有文件是否下载成功
          for deb in *.deb; do
            if [ ! -f "$deb" ] || [ $(stat -c%s "$deb") -lt 1024 ]; then
              echo "错误：$deb 下载不完整或失败"
              exit 1
            fi
          done

          # 强制安装
          sudo dpkg -i --force-all *.deb || {
            echo "安装deb包失败，尝试修复权限"
            sudo chmod 755 /var/lib/dpkg/info
            sudo dpkg -i --force-all *.deb
          }

          cd ..

      - name: Install remaining dependencies
        run: |
          echo "===== 安装剩余依赖 ====="
          sudo apt install -y -f \
            python3 python3-dev \
            gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf \
            crossbuild-essential-armhf \
            libssl-dev:armhf zlib1g-dev:armhf libidn2-0-dev:armhf \
            libtasn1-6-dev:armhf libnettle8:armhf libhogweed6:armhf \
            pkg-config wget tar xz-utils make

          arm-linux-gnueabihf-gcc --version || { echo "ARM工具链安装失败"; exit 1; }

      # 以下步骤与之前相同...
      - name: Cross-compile GnuTLS
        run: |
          echo "===== 交叉编译GnuTLS ====="
          GNUTLS_VERSION="3.7.9"
          wget -q --show-progress "https://www.gnupg.org/ftp/gcrypt/gnutls/v3.7/gnutls-$GNUTLS_VERSION.tar.xz"
          tar -xJf gnutls-$GNUTLS_VERSION.tar.xz
          cd gnutls-$GNUTLS_VERSION

          ./configure \
            --host=arm-linux-gnueabihf \
            --prefix=/opt/arm-gnutls \
            --disable-doc --disable-tests \
            --enable-shared --without-p11-kit \
            --with-zlib --with-idn2 \
            CFLAGS="-march=armv7-a -mfpu=neon -mfloat-abi=hard -Os" \
            LDFLAGS="-static-libgcc"

          make -j2
          sudo make install

          [ -f "/opt/arm-gnutls/lib/libgnutls.so" ] || { echo "GnuTLS编译失败"; exit 1; }

      - name: Download Samba source
        run: |
          echo "===== 下载Samba源码 ====="
          SAMBA_VERSION="4.20.0"
          wget -q --show-progress "https://download.samba.org/pub/samba/stable/samba-$SAMBA_VERSION.tar.gz"
          tar -xzf samba-$SAMBA_VERSION.tar.gz
          cd samba-$SAMBA_VERSION
          ./configure --version > /dev/null || { echo "Samba源码损坏"; exit 1; }

      - name: Configure Samba
        run: |
          echo "===== 配置Samba ====="
          SAMBA_VERSION="4.20.0"
          cd samba-$SAMBA_VERSION

          export PKG_CONFIG_PATH="/opt/arm-gnutls/lib/pkgconfig:/usr/lib/arm-linux-gnueabihf/pkgconfig"
          export LD_LIBRARY_PATH="/opt/arm-gnutls/lib"

          ./configure \
            --enable-fhs \
            --host=arm-linux-gnueabihf \
            --prefix=/usr \
            --sysconfdir=/etc/samba \
            --localstatedir=/var \
            --with-privatedir=/var/lib/samba/private \
            --disable-python --without-ldap --without-ad-dc \
            --without-systemd --without-winbind \
            --with-gnutls=/opt/arm-gnutls \
            CFLAGS="-march=armv7-a -mfpu=neon -mfloat-abi=hard -Os -I/opt/arm-gnutls/include" \
            LDFLAGS="-L/opt/arm-gnutls/lib -static-libgcc -static-libstdc++"

      - name: Compile Samba
        run: |
          echo "===== 编译Samba ====="
          SAMBA_VERSION="4.20.0"
          cd samba-$SAMBA_VERSION
          make smbd -j2 V=1
          make nmbd -j2 V=1
          make smbpasswd -j2 V=1

      - name: Verify binaries
        run: |
          echo "===== 验证二进制文件 ====="
          SAMBA_VERSION="4.20.0"
          file samba-$SAMBA_VERSION/bin/smbd | grep "ARM" || { echo "非ARM架构"; exit 1; }
          arm-linux-gnueabihf-readelf -d samba-$SAMBA_VERSION/bin/smbd | grep "libgnutls" || { echo "未链接GnuTLS"; exit 1; }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: samba420-armv7-binaries
          path: |
            samba-4.20.0/bin/smbd
            samba-4.20.0/bin/nmbd
            samba-4.20.0/bin/smbpasswd
          retention-days: 30
